// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/mysql/working_experience/repository.go

// Package mockworkingexperience is a generated GoMock package.
package mockworkingexperience

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ramasuryananda/dummy-cv/internal/dto/entity"
)

// MockRepositoryProvider is a mock of RepositoryProvider interface.
type MockRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProviderMockRecorder
}

// MockRepositoryProviderMockRecorder is the mock recorder for MockRepositoryProvider.
type MockRepositoryProviderMockRecorder struct {
	mock *MockRepositoryProvider
}

// NewMockRepositoryProvider creates a new mock instance.
func NewMockRepositoryProvider(ctrl *gomock.Controller) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProvider) EXPECT() *MockRepositoryProviderMockRecorder {
	return m.recorder
}

// GetWorkingExperienceByProfileCode mocks base method.
func (m *MockRepositoryProvider) GetWorkingExperienceByProfileCode(ctx context.Context, code uint64) (entity.WorkingExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingExperienceByProfileCode", ctx, code)
	ret0, _ := ret[0].(entity.WorkingExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingExperienceByProfileCode indicates an expected call of GetWorkingExperienceByProfileCode.
func (mr *MockRepositoryProviderMockRecorder) GetWorkingExperienceByProfileCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingExperienceByProfileCode", reflect.TypeOf((*MockRepositoryProvider)(nil).GetWorkingExperienceByProfileCode), ctx, code)
}

// SaveWorkingExperience mocks base method.
func (m *MockRepositoryProvider) SaveWorkingExperience(ctx context.Context, data entity.WorkingExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorkingExperience", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWorkingExperience indicates an expected call of SaveWorkingExperience.
func (mr *MockRepositoryProviderMockRecorder) SaveWorkingExperience(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorkingExperience", reflect.TypeOf((*MockRepositoryProvider)(nil).SaveWorkingExperience), ctx, data)
}
