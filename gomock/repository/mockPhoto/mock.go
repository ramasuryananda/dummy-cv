// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/mysql/profile_photo/repository.go

// Package mockphoto is a generated GoMock package.
package mockphoto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ramasuryananda/dummy-cv/internal/dto/entity"
)

// MockRepositoryProvider is a mock of RepositoryProvider interface.
type MockRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProviderMockRecorder
}

// MockRepositoryProviderMockRecorder is the mock recorder for MockRepositoryProvider.
type MockRepositoryProviderMockRecorder struct {
	mock *MockRepositoryProvider
}

// NewMockRepositoryProvider creates a new mock instance.
func NewMockRepositoryProvider(ctrl *gomock.Controller) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProvider) EXPECT() *MockRepositoryProviderMockRecorder {
	return m.recorder
}

// DeleteUserProfilePhoto mocks base method.
func (m *MockRepositoryProvider) DeleteUserProfilePhoto(ctx context.Context, profilePhoto entity.ProfilePhoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfilePhoto", ctx, profilePhoto)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProfilePhoto indicates an expected call of DeleteUserProfilePhoto.
func (mr *MockRepositoryProviderMockRecorder) DeleteUserProfilePhoto(ctx, profilePhoto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfilePhoto", reflect.TypeOf((*MockRepositoryProvider)(nil).DeleteUserProfilePhoto), ctx, profilePhoto)
}

// GetUserProfilePhotoByProfileCode mocks base method.
func (m *MockRepositoryProvider) GetUserProfilePhotoByProfileCode(ctx context.Context, profileCode uint64) (entity.ProfilePhoto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfilePhotoByProfileCode", ctx, profileCode)
	ret0, _ := ret[0].(entity.ProfilePhoto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfilePhotoByProfileCode indicates an expected call of GetUserProfilePhotoByProfileCode.
func (mr *MockRepositoryProviderMockRecorder) GetUserProfilePhotoByProfileCode(ctx, profileCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfilePhotoByProfileCode", reflect.TypeOf((*MockRepositoryProvider)(nil).GetUserProfilePhotoByProfileCode), ctx, profileCode)
}

// SaveUserProfilePhoto mocks base method.
func (m *MockRepositoryProvider) SaveUserProfilePhoto(ctx context.Context, profilePhoto entity.ProfilePhoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserProfilePhoto", ctx, profilePhoto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserProfilePhoto indicates an expected call of SaveUserProfilePhoto.
func (mr *MockRepositoryProviderMockRecorder) SaveUserProfilePhoto(ctx, profilePhoto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserProfilePhoto", reflect.TypeOf((*MockRepositoryProvider)(nil).SaveUserProfilePhoto), ctx, profilePhoto)
}
