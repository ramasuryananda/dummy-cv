// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/mysql/education/repository.go

// Package mockeducation is a generated GoMock package.
package mockeducation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ramasuryananda/dummy-cv/internal/dto/entity"
)

// MockRepositoryProvider is a mock of RepositoryProvider interface.
type MockRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProviderMockRecorder
}

// MockRepositoryProviderMockRecorder is the mock recorder for MockRepositoryProvider.
type MockRepositoryProviderMockRecorder struct {
	mock *MockRepositoryProvider
}

// NewMockRepositoryProvider creates a new mock instance.
func NewMockRepositoryProvider(ctrl *gomock.Controller) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProvider) EXPECT() *MockRepositoryProviderMockRecorder {
	return m.recorder
}

// CreateEducationData mocks base method.
func (m *MockRepositoryProvider) CreateEducationData(ctx context.Context, data entity.Education) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEducationData", ctx, data)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEducationData indicates an expected call of CreateEducationData.
func (mr *MockRepositoryProviderMockRecorder) CreateEducationData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEducationData", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateEducationData), ctx, data)
}

// DeleteEducationData mocks base method.
func (m *MockRepositoryProvider) DeleteEducationData(ctx context.Context, profileCode, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEducationData", ctx, profileCode, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEducationData indicates an expected call of DeleteEducationData.
func (mr *MockRepositoryProviderMockRecorder) DeleteEducationData(ctx, profileCode, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEducationData", reflect.TypeOf((*MockRepositoryProvider)(nil).DeleteEducationData), ctx, profileCode, id)
}

// GetEducationByProfileCode mocks base method.
func (m *MockRepositoryProvider) GetEducationByProfileCode(ctx context.Context, profileCode uint64) ([]entity.Education, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducationByProfileCode", ctx, profileCode)
	ret0, _ := ret[0].([]entity.Education)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducationByProfileCode indicates an expected call of GetEducationByProfileCode.
func (mr *MockRepositoryProviderMockRecorder) GetEducationByProfileCode(ctx, profileCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducationByProfileCode", reflect.TypeOf((*MockRepositoryProvider)(nil).GetEducationByProfileCode), ctx, profileCode)
}

// GetFirstEducationByProfileCodeandID mocks base method.
func (m *MockRepositoryProvider) GetFirstEducationByProfileCodeandID(ctx context.Context, profileCode, id uint64) (entity.Education, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEducationByProfileCodeandID", ctx, profileCode, id)
	ret0, _ := ret[0].(entity.Education)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstEducationByProfileCodeandID indicates an expected call of GetFirstEducationByProfileCodeandID.
func (mr *MockRepositoryProviderMockRecorder) GetFirstEducationByProfileCodeandID(ctx, profileCode, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEducationByProfileCodeandID", reflect.TypeOf((*MockRepositoryProvider)(nil).GetFirstEducationByProfileCodeandID), ctx, profileCode, id)
}
